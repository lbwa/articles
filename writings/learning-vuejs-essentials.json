{"title":"学习 Vue.js 基础","subtitle":"总结在学习Vue.js官方文档时的一些心得","date":"2018 FEB 24","author":"Bowen","tags":["前端开发","JavaScript","Vue.js"],"errno":0,"to":"writings/learning-vuejs-essentials","content":"\r\n## 简介\r\n\r\n　　在HTML文档中，类似v-bind的特性被称为指令。指令带有前缀v-。以表示它们是Vue提供的特性。它们会在渲染的DOM上应用特殊的响应式行为。看起来Vue应用看起来非常像字符串模板，此时数据与DOM建立了关联，所有的东西都是响应式的。在Vue.js编程中，数据都是以对象的属性存储，即在Vue.js中存在数据对象用于存储数据。\r\n\r\n## 常用指令\r\n\r\n### 条件与循环\r\n\r\n`v-for`指令可以绑定数组的数据来渲染一个项目列表。\r\n\r\n### 处理用户输入\r\n\r\n`v-on`指令添加一个事件监听器，通过它调用在Vue实例中的定义的方法。\r\n 在Vue中操作DOM时，所有实际操作DOM都是Vue来操作，开发人员不会触碰DOM，所以开发时，只需关注逻辑层面即可。\r\n\r\n`v-model`指令，用来实现表单输入和应用状态之间的双向绑定。他的作用是修改表单控件的value值，同时监听所在表单控件的input事件，在该指令后添加.lazy修饰符可改为监听change事件。\r\n\r\n## Vue实例\r\n\r\n　　当一个Vue实例被创建时，它像Vue的响应式系统加入了其data对象中所能找到的所有属性（所有可枚举属性？）。只有这些属性发生变化时，视图才会产生“响应”（视图重绘），即匹配更新为新的值。若之后再向data对象中添加的属性不是“响应式”的。\r\n\r\n综上，只有创建Vue实例时的`data`对象中的属性才是“响应式”的，后期添加响应式属性使用` Vue.set(object, key, value)`又可写作 `vm.$set(object,key,value)`,其中vm是实例名，或在创建实例时添加一个该属性的默认值（具体见列表渲染中对象更改检测注意事项）。\r\n\r\n那么，如何达到在创建实例之后，在未来某一时刻还会向data对象添加属性并产生视图更新的目的？解决的方法就是设置一些初始值，未来只需要修改某一初始值就可以达到响应式更新视图的目的。\r\n\r\n注：`Object.freeze( )`（该方法表示参数对象是永不可变的，不可新增、修改、删除该对象的某一属性）会阻止修改现有的属性。也就意味着响应系统之后就无法追踪变化。\r\nVue实例除了数据属性之外，还暴露了一些实例属性和方法，这些属性都是以$开头，以便将用户定义的属性区分开来。\r\n\r\n### 实例生命周期钩子\r\n\r\n含义：给用户在实例的某个时期（比如，创建实例后，销毁实例后）运行自己代码的机会。\r\n注：在实例声明周期钩子中，**不要用箭头函数**，因为箭头函数的this是借用外层作用域的this，箭头函数本身是没有this对象的。\r\n\r\n## 模板语法\r\n\r\n### 插值\r\n\r\n#### 文本\r\n\r\n数据绑定最常见的形式是使用`Mustache`语法（双大括号）的文本插值：\r\n`<span>{ {msg} }</span>`\r\n`Mustache`标签将被替换为对应数据对象（即`Vue`参数中的对象的data属性，该属性是一个对象）上`msg`属性的值。\r\n\r\n无论何时，绑定的`msg`属性变化时，插值处的的内容都会更新。\r\n\r\n在标签中添加`v-once`指令，就会执行一次性赋值，后续数据对象中绑定的属性更新时，插值处内容将不会更新。\r\n\r\n#### 原始HTML\r\n\r\n据前所述，双大括号将数据解释为普通文本，而非HTML代码。为输出真正的HTML代码，需要使用v-html指令。\r\n\r\n#### 特性\r\n\r\nMustache语法不能作用在HTML特性上，遇到这种情况要（响应式赋值）使用v-bind指令：\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app\">\r\n  <span v-bind:id=\"dynamicId\" >testing text</span>\r\n  <button v-bind:disabled=\"isDisabled\">Testing button</button>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nlet vm = new Vue({\r\n   el:'#app',\r\n   data: {\r\n      dynamicId:'testing-id',\r\n      isDisabled: true\r\n   }\r\n});\r\n```\r\n\r\n在布尔特性下，它们的存在即暗示为true，`v-bind`工作起来与上述不同。在示例中，当`isDisabled`为false时，将不会被包含在渲染出的`<button>`标签中。\r\n\r\n#### 使用JavaScript表达式\r\n\r\n对于所有的数据绑定，`Vue.js`都提供完全的JavaScript表达式的支持。\r\n在Mustache语法中只支持表达式，不支持流控制。 　\r\n\r\n```js\r\n\r\n// 这是语句，不是表达式\r\n{ { let a = 1; } }\r\n\r\n// 流控制不会生效，请使用三元表达式代替\r\n{ { if(true) { msg } } }\r\n\r\n```\r\n\r\n模板表达式都是存在于一个沙盒中，该沙盒只存在一些默认的全局变量白名单，如`Math`、`Date`。在模板表达式中无法访问用户定义的全局变量。\r\n\r\n#### 指令\r\n\r\n指令是带有`v-前缀`的特殊属性。指令属性的值预期是单个JavaScript表达式（`v-for`除外）。\r\n指令的职责是当表达式的值改变时，将其产生的连带影响，响应式的作用于DOM。\r\n\r\n#### 缩写\r\n\r\n`v-bind`可直接省略，`v-on`可缩写为`@`　\r\n\r\n`v-bind:id = \"myId\" `缩写为 `:id=\"myId\"`　\r\n\r\n`v-on:click = \"doSomething\" `缩写为` @click=\"doSomething\"`\r\n\r\n计算属性和侦听器\r\n一般只在Mustache语法中写入显而易见的JavaScript表达式，否则在Mustache语法中请使用计算属性或方法。\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app\">\r\n  <p>{ {reverseMsg} }</p>\r\n  <p>{ {reverseString()} }</p>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nlet vm = new Vue({\r\n    el: '#app2',\r\n    computed: {\r\n      /**\r\n       * 相当于某属性的getter函数，有缓存的作用，在依赖的数据值未改变的情况下，不会重新\r\n       * 执行函数，否则执行更新\r\n       */\r\n      reverseMsg: function () {\r\n        return 'computed'.split('').reverse().join('');\r\n      }\r\n    },\r\n    methods: {\r\n      // 每次调用都会重新计算函数返回值\r\n      reverseString: function () {\r\n        return 'methods'.split('').reverse().join('');\r\n      }\r\n    }\r\n  });\r\n```\r\n\r\n## 计算属性和侦听器\r\n\r\n### 计算属性\r\n\r\n#### 计算属性vs方法\r\n\r\n　　二者在写法上，都是存储在一个对象中，都是一个函数。\r\n\r\n　　二者的区别在于，计算属性是**基于它们的依赖进行缓存**的，相当于某属性的getter函数（计算属性函数本身默认只包含一个get方法），**只有**在该属性所依赖的数据**值改变**时，才会重新计算，否则不计算。而对于方法，当每次重绘渲染发生时，都将**总是**再次执行函数，不论值是否改变，即**方法不依赖值的改变而执行**。\r\n\r\n综上，**推荐使用计算属性**，若不希望调用缓存则使用方法。\r\n\r\n### 侦听器\r\n\r\n　　Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。 在大多数情况（同步执行）下，使用计算属性，在特殊情况（异步执行，如侦听`Ajex`或开销较大时需要侦听的情况）下监听则可建立一个自定义监听器。\r\n\r\n使用场景：当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。\r\n\r\n个人理解：可类比JavaScript中的事件处理程序。\r\n\r\n## Class 和 Style 绑定\r\n\r\n#### 对象语法（切换class）\r\n\r\n给`v-bind:class`传入一个对象，以**动态地切换**class\r\n`<div v-bind:class = \"{ active: isActive }\"></div>`\r\n以上表示active这个class是否存在取决于isActive的布尔值。\r\n`v-bind:class`可与普通class**共存**。\r\n\r\n## 列表渲染\r\n\r\n### 数组更新检测注意事项\r\n\r\n由于 JavaScript 的限制，Vue 不能检测以下变动的数组：\r\n\r\n1. 当你利用索引直接设置一个项时，例如：\r\n`vm.items[indexOfItem] = newValue`\r\n\r\n2. 当你修改数组的长度时，例如：\r\n`vm.items.length = newLengt`\r\n为了解决第一类问题，以下两种方式都可以实现和 `vm.items[indexOfItem] = newValue`相同的效果，同时也将触发状态更新：\r\n\r\n```js\r\n// Vue.set\r\nVue.set(example1.items, indexOfItem, newValue)\r\n// Array.prototype.splice\r\nexample1.items.splice(indexOfItem, 1, newValue)\r\n```\r\n\r\n为了解决第二类问题，你可以使用 splice：\r\n`example1.items.splice(newLength)`\r\n\r\n### 对象更改检测注意事项\r\n\r\n还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除：\r\n\r\n```js\r\nvar vm = new Vue({\r\n  data: {\r\n    a: 1\r\n  }\r\n})\r\n// `vm.a` 现在是响应式的\r\n\r\nvm.b = 2\r\n// `vm.b` 不是响应式的\r\n```\r\n\r\n对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 `Vue.set(object, key, value)` 方法向嵌套对象添加响应式属性。例如，对于：\r\n\r\n```js\r\nvar vm = new Vue({\r\n  data: {\r\n    userProfile: {\r\n      name: 'Anika'\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n你可以添加一个新的 age 属性到嵌套的 userProfile 对象：\r\n`Vue.set(vm.userProfile, 'age', 27)`\r\n你还可以使用 vm.$set 实例方法，它只是全局 Vue.set 的别名：\r\n`vm.$set(vm.userProfile, 'age', 27)`\r\n有时你可能需要为已有对象赋予多个新属性，比如使用 `Object.assign()` 或 `_.extend()`。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：\r\n\r\n```js\r\nObject.assign(vm.userProfile, {\r\n  age: 27,\r\n  favoriteColor: 'Vue Green'\r\n})\r\n```\r\n\r\n你应该这样做：\r\n\r\n```js\r\nvm.userProfile = Object.assign({}, vm.userProfile, {\r\n  age: 27,\r\n  favoriteColor: 'Vue Green'\r\n})\r\n```\r\n\r\n## 事件处理\r\n\r\n### 事件修饰符\r\n\r\n在事件处理程序中调用 `event.preventDefault()` 或  `event.stopPropagation()`是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。\r\n\r\n为了解决这个问题，`Vue.js `为 ` v-on` 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。\r\n\r\n注：使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用`@click.prevent.self` 会阻止所有的点击，而 `@click.self.prevent` 只会阻止对元素自身的点击。\r\n\r\nVue 还对应 addEventListener 中的 passive 选项提供了 `.passive`修饰符。\r\n\r\n```html\r\n\r\n<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->\r\n<!-- 而不会等待 `onScroll` 完成  -->\r\n<!-- 这其中包含 `event.preventDefault()` 的情况 -->\r\n<div v-on:scroll.passive=\"onScroll\">...</div>\r\n\r\n```\r\n这个 `.passive `修饰符尤其能够提升移动端的性能。\r\n不要把` .passive `和 `.prevent` 一起使用，因为` .prevent` 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，`.passive`会告诉浏览器你不想阻止事件的默认行为。\r\n\r\n## 表单输入绑定\r\n\r\n### 基础用法\r\n\r\n`v-model`指令用于表单元素的上创建双向数据绑定（即用于代替原来value属性的作用，表示当前表单元素的值）。他是根据控件类型 自动选取正确的方法来更新元素。\r\n\r\n`v-model`本质是**语法糖**，它的作用是修改表单控件的value值，同时监听所在表单控件的input事件，在该指令后添加`.lazy`修饰符可改为监听change事件。\r\n\r\n`<input  v-bind:value=\"something\"  v-on:input=\"something = $event.target.value\"`\r\n`v-model`会忽略所有表单元素的` value`、`checked`、`selected` 特性的初始值而总是将 Vue 实例的数据（`data对象`）作为数据来源。你应该通过 JavaScript 在组件的 `data`选项中声明初始值。\r\n\r\n#### 多个复选框\r\n\r\n本质：将多个复选框，绑定到同一数组，否则选择其中一个，就会选择所有。\r\n\r\n将`v-model`的`data`对象属性初始化为一个数组，那么该多个复选框将是可以多选的。\r\n\r\n注：在表单控件中，选中控件（非文字空间，如多选框、单选框）将改变Vue实例的数据对象的值（因为表单元素与Vue数据对象是双向绑定的，此行为也间接修改了v-model值），则将数据对象值修改为表单控件value的值，但修改value的值是不会改变v-model的值。因为v-model的值只取决于Vue实例的数据对象。\r\n\r\n在表单控件中，若要绑定多个数据，那么将他们绑定至同一数组中，若绑定单个数据，则绑定至以一个字符串。\r\n\r\n### 值绑定\r\n\r\n含义：对于单选、复选以及选择框的选项，`v-model`绑定的值通常是静态字符串（对于复选按钮也可以是布尔值），进一步，可用`v-bind`指令将一个动态属性（该值可以不是字符串）绑定在`v-model`值上。其中，单选/复选按钮本身value值只能是布尔值，这是在Vue内部维护的。`v-model`值只是表单控件的value属性的一个体现。\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app5\">\r\n    <!-- 注：在复选框中值绑定，必须绑定为 true-value 和 false-value 这两个属性，否则\r\n    值绑定失效 -->\r\n    <input\r\n     id=\"testValue\"\r\n     type=\"checkbox\"\r\n     v-model=\"toggle\"\r\n     v-bind:true-value=\"Yes\"\r\n     v-bind:false-value=\"No\"\r\n    >\r\n    <label for=\"testValue\">Test value</label>\r\n    <p>You have selected { {toggle} }</p>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nlet vm5 = new Vue({\r\n    el: '#app5',\r\n    data: {\r\n      toggle: true,\r\n      Yes: 'Yes',\r\n      No: \"No\",\r\n    }\r\n  });\r\n```\r\n\r\n　　另外，注意因为提交表单时，提交的是表单控件的value的属性值。这里的 `true-value`和 `false-value` 特性并不会影响输入控件的 value 特性，因为浏览器在提交表单时并不会包含未被选中的复选框。如果要确保表单中这两个值中的一个能够被提交，(比如`yes`或`no`)，请换用单选按钮。\r\n\r\n在复选框中值绑定，必须绑定为`true-value`和`false-value`这两个属性(除非修改源码，否则不能自定义这两个属性名)，否则值绑定失效。在其他value为非布尔值的表单控件中，直接将特定值绑定到value属性。\r\n\r\n### 修饰符\r\n\r\n#### .number\r\n\r\n　　如果想自动将用户的输入值转为数值类型，可以给` v-model `添加 `number` 修饰符：\r\n`<input v-model.number=\"age\" type=\"number\">`\r\n这通常很有用，因为即使在` type=\"number\" `时，HTML 输入元素的值也总会返回（某个数字的字符串形式）字符串。\r\n\r\n```js\r\n// 当没有.number修饰符时，返回某个字符串的String类型形式\r\ntypeof vm.age === 'String'\r\n\r\n// 有.number修饰符时，返回某个字符串的Number类型形式\r\ntypeof vm.age === 'Number'\r\n```\r\n\r\n注：此时的type必须是`number`。\r\n\r\n## 组件\r\n\r\n### 使用组件\r\n\r\n#### 全局注册\r\n\r\n```js\r\n// 全局注册组件，component方法不带s\r\nVue.component('my-component', {\r\n  template: '<div>A custom component!</div>'\r\n})\r\n\r\n// 创建根实例（应用组件的范围）\r\nnew Vue({\r\n  el: '#example'\r\n})\r\n```\r\n　　组件在注册之后，便可以作为自定义元素 `<my-component></my-component>` 在一个实例的模板中使用。注意确保在初始化根实例之前注册组件。\r\n\r\n#### 局部注册\r\n\r\n示例代码如下：\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app1\">\r\n  <my></my>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nconst child = {\r\n  template: '<div>A anther component!</div>'\r\n};\r\n\r\nnew Vue({\r\n  el: '#app1',\r\n  components: {\r\n    'my': child\r\n  },\r\n});\r\n```\r\n\r\n**注：全局注册时，component属性不带s，局部注册时components属性带s。**\r\n\r\n#### DOM模板解析注意事项\r\n\r\n当使用 DOM 作为模板时 (例如，使用 el 选项来把 Vue 实例挂载到一个已有内容的元素上)，你会受到 HTML 本身的一些限制，因为 Vue 只有在浏览器解析、规范化模板之后才能获取其内容。尤其要注意，像` <ul>`、`<ol>`、`<table>`、`<select> `这样的元素里允许包含的元素有限制，而另一些像 `<option> `这样的元素只能出现在某些特定元素的内部。\r\n\r\n应当注意，如果使用来自以下来源之一的字符串模板，则没有这些限制：\r\n - `<script type=\"text/x-template\">`\r\n - JavaScript 内联模板字符串\r\n - vue 组件\r\n因此，请尽可能使用字符串模板。\r\n\r\n这样不可以\r\n\r\n```html\r\n<body>\r\n  <div id=\"app\">\r\n    <select>\r\n         <optioncomp></optioncomp>\r\n    </select>\r\n  </div>\r\n  <script src=\"lib/vue.js\"></script>\r\n  <script>\r\n    new Vue({\r\n      el: '#app',\r\n        components:{\r\n         'optioncomp':{\r\n            template: '<option>a</option>'\r\n          }\r\n        }\r\n    })\r\n   </script>\r\n</body>\r\n```\r\n\r\n但是用is特殊属性可以：\r\n\r\n```html\r\n<body>\r\n  <div id=\"app\">\r\n      <select>\r\n          <option is=\"optioncomp\"></option>\r\n      </select>\r\n  </div>\r\n  <script src=\"lib/vue.js\"></script>\r\n  <script>\r\n    new Vue({\r\n      el: '#app',\r\n      components:{\r\n        'optioncomp':{\r\n          template: '<option>a</option>'\r\n        }\r\n      }\r\n    })\r\n  </script>\r\n</body>\r\n```\r\n\r\n或者temp模板标签也可以\r\n\r\n```html\r\n<body>\r\n  <div id=\"app\">\r\n    <select>\r\n      <option is=\"optioncomp\"></option>\r\n    </select>\r\n    <!--模板内容存放区域-->\r\n    <script type=\"x-template\" id=\"optioncompTemp\">\r\n      <option >a</option>\r\n    </script>\r\n  </div>\r\n  <script src=\"lib/vue.js\"></script>\r\n  <script>\r\n    new Vue({\r\n      el: '#app',\r\n        components:{\r\n          'optioncomp':{\r\n            template: '#optioncompTemp'\r\n          }\r\n        }\r\n    })\r\n  </script>\r\n</body>\r\n```\r\n\r\n或者内联模板字符串\r\n\r\n```html\r\n<body>\r\n  <div id=\"app\">\r\n    <selectcomp></selectcomp>\r\n  </div>\r\n  <script src=\"lib/vue.js\"></script>\r\n  <script>\r\n    Vue.component('optioncomp',{\r\n      template: '<option >a</option>'\r\n    });\r\n    new Vue({\r\n      el: '#app',\r\n      components:{\r\n        'selectcomp':{\r\n          template: `<select><optioncomp></optioncomp></select>`\r\n        }\r\n      }\r\n    })\r\n    </script>\r\n</body>\r\n```\r\n\r\n类型为单页应用的组件文件xxx.vue的情况暂略。\r\n\r\n#### 组件中的data对象必须是函数\r\n\r\n原因：首先明白，只有在创建Vue实例时，才会创建对data对象的引用。\r\n　　若是data对象不是函数，那么在多处使用该组件（创建Vue实例）时，将造成多处的组件使用的是**同一**data对象。若是data是函数，那么在多处使用该组件时，在创建Vue实例时执行data函数，此时才会真正的创建仅仅属于每个组件自己的data对象，那么此时多处的组件都有自己的data对象（即每使用一次该组件都会重新创建一个新的data对象），这些data对象是相互独立，互不影响的，达到解耦。\r\n\r\n```js\r\n// 在局部组件中添加data对象\r\nconst child = {\r\n  template: `<div>{ {fn} }</div>`,\r\n  data: function() {\r\n    return {\r\n      fn: '这里是局部组件的data对象'\r\n    };\r\n  }\r\n};\r\n\r\nnew Vue({\r\n  el: '#app1',\r\n  components: {\r\n    'my': child\r\n  },\r\n});\r\n\r\n// 在全局组件中添加data对象\r\nVue.component('global', {\r\n  template: '<button @click=\"counter += 1\">{ {counter} }</button>',\r\n  data: function() {\r\n    return {\r\n      counter: 0\r\n    };\r\n  }\r\n});\r\n\r\nnew Vue({\r\n  el: '#app2'\r\n});\r\n```\r\n\r\n在全局或者局部组件中，data 函数必须和 template 属性在同一对象中。\r\n\r\n#### camelCase vs. kebab-case\r\n\r\nHTML 特性是不区分大小写的。所以，当使用的不是字符串模板时，camelCase (驼峰式命名) 的 prop 需要转换为相对应的 kebab-case (短横线分隔式命名)：\r\n```js\r\nVue.component('child', {\r\n  // 在 JavaScript 中使用 camelCase\r\n  props: ['myMessage'],\r\n  template: '{ { myMessage } }'\r\n})\r\n\r\n\r\n```\r\n如果你使用字符串模板，则没有这些限制。\r\n\r\n### prop\r\n\r\n静态prop作用是传递引用数据，父子组件将同步变化，**侧重点是同步变化**\r\n\r\n应用场景：\r\n\r\n　　当父组件中的某一属性的属性值需要传递至子组件（组件模板）中Mustache值（即建立一个子组件与父组件的引用时，或称指针）时，需要通过组件的props数组接口传递该值。\r\n\r\n　　若不使用props数组接口，则将父组件的属性的属性值称为非prop特性，他们将以非prop特性传递到子组件（组件模板），成为子组件模板中的标签的属性。\r\n\r\n> 当父组件中 props 某一项更新时，更新后的新值将自动传入子组件\r\n\r\n#### 动态 prop\r\n\r\n动态prop作用是动态修改prop，与静态prop不同的是，动态prop的侧重点是**动态修改prop**\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app4\">\r\n  <input type=\"text\" v-model=\"parentMsg\">\r\n  <br>\r\n  <child :my-msg=\"parentMsg\"></child>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nlet vm4 = new Vue({\r\n    el:'#app4',\r\n    data:{\r\n      parentMsg:''\r\n    },\r\n    components:{\r\n\r\n      'child':{\r\n        props:['myMsg'],\r\n        template: `{ {myMsg} }`,\r\n      }\r\n\r\n    },\r\n  });\r\n```\r\n\r\n数据传输如下：\r\n\r\n>v-model <=>(此处双向绑定) data数据对象中的parentMsg => v-bind:my-msg读取data数据中的parentMsg => 得到my-msg的属性值 => 传递给组件中prop属性 => templata中的Mustache语法（双大括号插值）真正调用prop接口的值。\r\n\r\n其中v-model的属性值与input输入框双向绑定。\r\n\r\n借鉴上面的示例，我们可以将**父组件的方法**经 Vue 实例中的 prop 传递给子组件。\r\n```html\r\n<!-- parent.vue -->\r\n<div id=\"app\">\r\n  <custom :methods=\"myMethods\"></custom>\r\n</div>\r\n```\r\n```js\r\n// child.vue\r\nexport default {\r\n  // 此处传递 methods 的值是一个对象（函数 myMethods），而不是固定思维中的基本类型值\r\n  props: ['methods']\r\n  // ...\r\n}\r\n```\r\n\r\n#### 区分父组件与子组件\r\n\r\n**说法一：**\r\n       由Vue.js官方文档（[组件——自定义事件][1]），其中第一句是“我们知道，父组件使用 prop 传递数据给子组件。”，这句话个人理解为父组件数据通过Vue实例的参数对象的prop特性数组将数据传递给子组件。而因为在Vue实例中，自定义标签根据Vue实例的prop属性接口提供数据给组件模板，以此推断，父组件指的是自定义标签，子组件指的是Vue实例中的模板（或者说是Vue实例渲染出的标签，即组件对象中的template属性值）。　\r\n\r\n**说法二：**\r\n       由官方文档（[组件——组件组合][2]），其中第一段，尤其是`常见的父子组件关系是组件A在他的模板中使用了组件B`，那么我们可推断当存在一种包含关系时，某一组件A的模板中包含组件B，那么我们称组件A数组件B的父组件，B是A的子组件。\r\n\r\n**总结：**\r\n       据官方文档（[组件——编译作用域][3]）如下：\r\n在深入内容分发 API 之前，我们先明确内容在哪个作用域里编译。假定模板为：\r\n\r\n```html\r\n<child-component>\r\n  { { message } }\r\n</child-component>\r\n```\r\n　　message 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：\r\n父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\r\n　　我们应该将对父组件与子组件的定义的想法更加拓宽一点，父子组件应该是一个相对概念。说法一和说法二都是正确的。个人觉得，对于父子组件的定义应该为，子组件一定由父组件产生，子组件只能存在父组件中。如上例，`<child-component>`的父组件为Vue实例挂载的元素（即`new Vue( )`中的参数对象中的`el属性值`），`<child-component>`是Vue实例挂载元素的子组件。而在组件定义中 ，`<child-component>`是组件模板（组件定义中的`template`属性）的父组件，组件模板为`<child-component>`的子组件。所以我们对于父子组件的定义不应该过于狭隘，父子组件应该是一个相对的概念。参照系不同，那么对于同一个组件到底是父组件还是子组件是不同的。\r\n\r\n#### 单向数据流\r\n\r\n　　Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会（反过来是通过事件传递数据，详见自定义事件）。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。\r\n　　另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值（因为二者之间通过`props数组`，二者之间存在数据引用）。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。\r\n在两种情况下，我们很容易忍不住想去修改 prop 中数据：\r\n1. Prop 作为初始值传入后，子组件想把它当作局部数据来用；\r\n2. Prop 作为原始数据传入，由子组件处理成其它数据输出。\r\n\r\n对这两种情况，正确的应对方式是：\r\n1. 定义一个局部变量，并用 prop 的值初始化它：\r\n\r\n```js\r\nprops: ['initialCounter'],\r\ndata: function () {\r\n  return { counter: this.initialCounter }\r\n}\r\n```\r\n\r\n2. 定义一个计算属性，处理 prop 的值并返回：\r\n\r\n```js\r\nprops: ['size'],\r\ncomputed: {\r\n  normalizedSize: function () {\r\n    return this.size.trim().toLowerCase()\r\n  }\r\n}\r\n```\r\n\r\n注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 `props`是一个对象或数组，在子组件内部改变它会影响父组件的状态。\r\n\r\n### 非prop特性\r\n\r\n**非prop特性作用是传递静态值，如父组件（自定义标签）的属性**\r\n\r\n含义：\r\n\r\n　　自定义标签中的属性（非Mustache值，即非双括号值，若需要建立父组件（自定义标签）与子组件（组件模板）之间的数据引用（或理解为指向子组件Mustache值的指针），则需要通过prop特性传递）指可以直接传入组件，而不需要定义相应的`props`。在形如`<mine data-line=\"red\" style=\"color:red;\"></mine>`的自定义标签中，当此时的Vue实例中的`props`属性没有定义名为`data-line`、`style`的接口时，那么我们称`data-line`、`style`属性为**非prop特性**。若在`props`中有调用，则是**props特性**。总而言之，以`props属性`中有没有出现属性A的名字来判断一个属性A是否是非prop特性。\r\n\r\n**应用场景：**要建立父子组件的数据引用（同步变化）时，通过`props数组`将父组件数据传递至子组件。要将父组件的属性，直接传递给子组件时，直接通过非prop特性传递。\r\n父组件向子组件传递数据是单向传递。子组件向父组件传递数据是通过事件传递（详见下文自定义事件）。\r\n\r\n应用：替换/合并现有的特性\r\n\r\n若存在组件模板（子组件）：\r\n\r\n`<p style=\"background: #fff;\">There is nothing</p>`\r\n\r\n自定义标签（父组件）为：\r\n\r\n`<mine data-line=\"red\" style=\"color:red;\"></mine>`\r\n\r\n　　在组件模板和自定义标签中存在同名特性时，除class和style特性在传递给组件模板的值会合并同名特性的特性值外，其他同名特性均会将传递的自定义标签的特性值覆盖组件模板中的同名特性值，使得组件被破坏。\r\n\r\n示例如下：\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app6\">\r\n  <mine data-line=\"red\" style=\"color:red;\"></mine>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nlet vm6 = new Vue({\r\n    el:'#app6',\r\n    components:{\r\n      \"mine\":{\r\n        template:`<p data-line=\"blue\" style=\"background: #fff;\">Nothing here</p>`,\r\n      }\r\n    }\r\n});\r\n```\r\n\r\n渲染结果为：\r\n\r\n红色的 `Nothing here`\r\n\r\n由上可知，模板中的 data-line 特性值被覆盖，style 特性的值与自定义标签中的同名特性合并。\r\n\r\n### 自定义事件\r\n\r\n应用场景：使用Vue的自定义事件可以达到子组件与父组件通信的目的。（父组件与子组件通过Vue实例中prop特性将数据传递给子组件）。\r\n\r\n```html\r\n<!-- html -->\r\n<div id=\"app7\">\r\n    <p>{ {total} }</p>\r\n    <counter @increment=\"incrementTotal\"></counter>\r\n    <counter @increment=\"incrementTotal\"></counter>\r\n    <counter @increment=\"incrementTotal\"></counter>\r\n    <counter @increment=\"incrementTotal\"></counter>\r\n</div>\r\n```\r\n\r\n```js\r\n// JavaScript\r\nlet vm7 = new Vue({\r\n    el:'#app7',\r\n    data:{\r\n      total:0\r\n    },\r\n    components:{\r\n      'counter':{\r\n        template:`<button @click=\"incrementCounter\">{ {counter} }</button>`,\r\n        data: function() {\r\n          return {\r\n            counter: 0,\r\n          };\r\n        },\r\n        methods: {\r\n          // 子组件计数\r\n          incrementCounter:function () {\r\n            this.counter += 1;\r\n            // 触发父组件事件\r\n            this.$emit('increment');  // 此处子组件与父组件（外部）完全解耦\r\n          },\r\n        },\r\n      }\r\n    },\r\n    methods:{\r\n      incrementTotal:function() {\r\n        this.total += 1;\r\n      }\r\n    },\r\n  });\r\n```\r\n\r\n数据传递如下：\r\n>点击`<button>` => 执行incrementCounter函数 => this.counter += 1;this.$emit('increment') => 『子组件中的数据传递结束，子组件通过$emit方法触发事件向父组件传递数据，给父组件一个信息，让父组件开始在父组件内部传递数据』 =>`<counter> ` => 执行incrementTotal函数 => this.total += 1;\r\n\r\n#### Prop 验证\r\n\r\n我们可以为组件的 prop 指定验证规则。如果传入的数据不符合要求，Vue 会发出警告。这对于开发给他人使用的组件非常有用。\r\n要指定验证规则，需要用对象的形式来定义 prop，而不能用字符串数组：\r\n\r\n```js\r\nVue.component('example', {\r\n  props: {\r\n    // 基础类型检测 (`null` 指允许任何类型)\r\n    propA: Number,\r\n    // 可能是多种类型\r\n    propB: [String, Number],\r\n    // 必传且是字符串\r\n    propC: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    // 数值且有默认值\r\n    propD: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    // 数组/对象的默认值应当由一个工厂函数返回\r\n    propE: {\r\n      type: Object,\r\n      default: function () {\r\n        return { message: 'hello' }\r\n      }\r\n    },\r\n    // 自定义验证函数\r\n    propF: {\r\n      validator: function (value) {\r\n        return value > 10\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\ntype 可以是下面原生构造器：\r\n* String\r\n* Number\r\n* Boolean\r\n* Function\r\n* Object\r\n* Array\r\n* Symbol\r\n\r\ntype 也可以是一个自定义构造器函数，使用 instanceof 检测。\r\n当 prop 验证失败，Vue 会抛出警告 (如果使用的是开发版本)。注意 prop 会在组件实例创建之前进行校验，所以在 default 或 validator 函数里，诸如 data、computed 或 methods 等实例属性还无法使用。\r\n\r\n#### 自定义组件的 v-model\r\n\r\n（2.2.0 新增 ）\r\n默认情况下，一个组件的` v-model `会使用 `value prop` 和 input 事件。但是诸如单选框、复选框之类的输入类型可能把 value 用作了别的目的。model 选项可以避免这样的冲突：\r\n\r\n```js\r\nVue.component('my-checkbox', {\r\n  //以下model选项作用是自定义v-model属性\r\n  model: {\r\n    prop: 'checked',\r\n    event: 'change'\r\n  },\r\n// 以下当props值为一个对象时，是为了指定验证规则\r\n// 以下props对象表示checked值为布尔值，value值为字符串\r\n  props: {\r\n    checked: Boolean,\r\n    // 这样就允许拿 `value` 这个 prop 做其它事了\r\n    value: String\r\n  },\r\n  // ...\r\n})\r\n```\r\n\r\n### 使用插槽分发内容（slot/作用域插槽）\r\n\r\n#### 简介\r\n\r\n有如下示例：\r\n\r\n```html\r\n<app>\r\n  <app-header></app-header>\r\n  <appfooter></appfooter>\r\n</app>\r\n```\r\n\r\n我们在使用如上例的组件时，传递给app的内容是由`<app>`的父组件决定的。\r\n\r\n以下列举其几种应用场景：\r\n\r\n1. 在一些开发过程中，我们可能会需要弹出通知（通知组件），那么这些通知又可分为警告通知、普通通知、错误通知等等类型（不同的通知类型可理解为通知组件的子组件），但是他们都是属于通知类型的（是各种通知类型的父组件）的。\r\n\r\n2.下拉菜单中按钮上的显示切换的应用（待补充）\r\n\r\n综上，可将`slot插槽`的作用总结为以下：\r\n\r\n　　为了组合这些子组件，我们可以使用特殊的`<slot>`元素作为特殊的原始内容的分发接口。父组件集中接收了所有子组件可能需要的内容。通过识别子组件`<slot>`的name属性来决定传递给对应子组件的内容。以上过程解释了如何通过`<slot>`方式向子组件分发内容。此过程常称为**内容分发**。\r\n\r\n　　以上的中心思想是，增强组件的**复用性**。相对于prop特性，slot插槽的组件是侧重**不需要引用数据**的更新的，但是需要多处使用**相同结构组件**时，就可使用slot插槽。\r\n\r\n#### 编译作用域\r\n\r\n>遵循原则：父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。\r\n\r\n#### 具名插槽\r\n\r\n示例代码如下：\r\n\r\n```html\r\n<div id=\"app9\">\r\n  <app-layout>\r\n    <!-- slot属性对应子组件模板中的同名slot元素 -->\r\n    <!-- 父组件内容在父组件作用域内编辑 -->\r\n    <h1 slot=\"header\">这里可能是一个页面的标题</h1>\r\n    <p>主要内容的一个段落</p>\r\n    <p>另一个主要段落</p>\r\n    <!-- 若子组件中不包含slot接口，那么父组件中的slot属性的标签将被丢弃 -->\r\n    <p slot=\"footer\">这里有一些联系信息</p>\r\n  </app-layout>\r\n</div>\r\n```\r\n\r\n```html\r\nlet vm9 = new Vue({\r\n  el:'#app9',\r\n  components:{\r\n    'app-layout':{\r\n      template:`\r\n      <div class=\"container\">\r\n        <header>\r\n        <!-- 子模板中的slot元素与父组件中的同名slot属性对应 -->\r\n          <slot name=\"header\"></slot>\r\n        </header>\r\n        <main>\r\n        <!-- 父组件中没有slot属性的元素将匹配以下子组件中的匿名插槽 -->\r\n          <slot></slot>\r\n        </main>\r\n        <footer>\r\n          <slot name=\"footer\"></slot>\r\n        </footer>\r\n      </div>\r\n      `,\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n渲染结果为：\r\n\r\n```html\r\n<div id=\"app\">\r\n  <div class=\"container\">\r\n    <header>\r\n      <h1>这里可能是一个页面的标题</h1>  <!-- 与 slot=\"header\" 对应-->\r\n    </header>\r\n    <main>\r\n      <p>主要内容的一个段落</p>    <!-- 与没有 slot 属性的内容对应-->\r\n      <p>另一个主要段落</p>\r\n    </main>\r\n    <footer>\r\n      <p>这里有一些联系信息</p>   <!-- 与 slot=\"footer\" 对应-->\r\n    </footer>\r\n  </div>\r\n</div>\r\n```\r\n\r\n>依据以上示例，可总结为，在设计组合使用的子组件时，依据父组件（自定义标签）中的slot属性与子组件（组件模板）模板中slot标签的对应关系来设计不同的复用子组件的显示（渲染）。\r\n\r\nslot插槽的侧重点在**设计子组件如何复用**\r\n\r\n#### 作用域插槽\r\n\r\n（2.1.0以上版本）\r\n\r\n>作用：作用域插槽仅仅是依靠prop对象（**数据作为prop对象的属性传递给父组件**）给子组件**提供**一个向父组件传递数据的**机会**。普通prop属性本身只是父组件向子组件的通道，并不接受子组件向父组件传递数据。\r\n\r\n示例代码如下：\r\n\r\n```html\r\n<div id=\"app10\">\r\n  <child>\r\n    <!-- 拥有slot-scape属性的template标签表示是作用域插槽的模板 -->\r\n    <!-- slot-scape属性的值作为一个变量固定接收子组件传递过来的props属性值。 -->\r\n    <template slot-scope=\"props\">\r\n      <span>hello from parent</span>\r\n      <span>{{ props.text }}</span>\r\n    </template>\r\n  </child>\r\n</div>\r\n```\r\n\r\n```js\r\nlet vm10 = new Vue({\r\n  el:'#app10',\r\n  components:{\r\n    'child':{\r\n      props:['props'] // 此处可省略，作用域插槽的模板会固定接收props属性值(prop对象)\r\n      template:`\r\n      <div class=\"child\">\r\n      <!-- 子组件中slot作用域插槽与父组件slot-scope属性绑定，向父组件传递数据 -->\r\n        <slot text=\"hello from child\"></slot>\r\n      </div>\r\n      `,\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n>由示例可知，子组件经由prop对象“插到”父组件上，故称**此时**的prop为作用域插槽。\r\n\r\n**与prop特性（props属性）、非prop特性（仅仅比较数据传递方向）、slot插槽的异同**\r\n\r\n不同：传递数据的方向不同\r\n\r\n　　由示例可知，与prop特性、非prop特性和slot插槽（**父组件向子组件传递数据**）不同的是，作用域插槽提供了一种**由子组件向父组件传递数据**的可能，即由子组件开始渲染DOM的可能。\r\n\r\n　　作用域插槽与普通slot插槽不同之处在于，作用域插槽**并不管**经过prop对象**传递给父组件的是什么内容**，以及父组件要如何分发内容。这是普通slot插槽的事情。作用域插槽仅仅是提供给子组件一个经prop对象向父组件传递数据的机会。其中，子组件数据**以prop对象的属性**传递到父组件中。因为prop对象本身只允许父组件向子组件传递数据。\r\n\r\n相同：均为父组件属性与子组件插槽绑定\r\n\r\n　　作用域插槽**本质**上可看作是与普通slot插槽传递数据方向相反的**slot具名插槽**，在父组件中，slot-scope属性将父组件与子组件的slot标签绑定。这一绑定数据传递的方式与父组件（自定义标签）中普通slot属性与子组件（组件模板）的同名slot具名（有name属性的slot标签）（或匿名）插槽绑定的方式是一致的。\r\n\r\n>在 2.5.0+，slot-scope 能被用在任意元素或组件中而不再局限于 template 标签。\r\n\r\n一个简单应用，将slot插槽与作用域插槽结合起来：自定义如何渲染列表的每一项：\r\n\r\n```html\r\n<div id=\"app11\">\r\n  <my-list :item=\"items\">\r\n    <li slot=\"item\" slot-scope=\"props\" class=\"my-fancy-item\">{{props.text}}</li>\r\n  </my-list>\r\n</div>\r\n```\r\n\r\n```js\r\nlet vm11 = new Vue({\r\n  el:'#app11',\r\n  data:{\r\n    // 父组件中自定义标签的items属性值，与插槽无关\r\n    items:'parent-list-items'\r\n  },\r\n  components:{\r\n    'my-list':{\r\n      template:`\r\n      <ul>\r\n        <slot name=\"item\"\r\n        v-for=\"item in items\"\r\n        :text=\"item.text\">\r\n        如果你看到这句话说明子组件中的slot插槽(name属性值)与父组件的slot属性(值)不能对\r\n        应，父组件接受到此数据（提示）无法对应分发，故没有li标签生成，但此提示仍然以文\r\n        本形式迭代输出。\r\n        </slot>\r\n      </ul>\r\n      `,\r\n\r\n      data: function() {\r\n        return {\r\n          // 此items是子组件中的items循环数据对象\r\n          items:[\r\n            {text:11},\r\n            {text:22},\r\n          ]\r\n        };\r\n      },\r\n\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n在示例中的子组件，各属性的作用如下：\r\n\r\n1. name属性：将子组件中的slot标签中的name属性与父组件中的slot属性值匹配，形成一一对应的数据传递关系（也是迭代产出新标签的**关键**）。依据上一节，将父组件接受的内容（**由作用域插槽传递而来**）依据name属性（内容分发的凭证）分发到各个子组件。\r\n1. v-for属性：迭代子组件的数据对象。\r\n1. :text=\"item.text\"：接受v-for迭代产出的值，text属性经prop对象传递给父组件。\r\n1. 父组件中，slot-scope属性：仅仅用于给子组件**提供**一个向父组件传输数据的通道。 它并不管传递的是什么内容，以及父组件将如何分发内容。\r\n\r\n　　由此示例可知，slot插槽和作用域插槽的不同之处在于，slot插槽提供内容分发凭证（即子组件中slot标签的name属性）将父组件接收的内容分发给各个子组件。作用域插槽是仅仅给子组件一个经由prop属性向父组件传递数据的机会。作用域插槽**并不管**经过prop对象**传递给父组件的是什么内容**，以及父组件要如何分发内容。***这是slot插槽的事情***。\r\n\r\n### 动态组件\r\n\r\n使用保留的`<component>`元素，并对其`is`属性进行动态绑定，切换`is`属性的值可在同一个挂载点动态切换多个组件。\r\n\r\n#### keep-alive\r\n\r\n在父组件外包围`<keep-alive>`可将被切换的组件保留在内存中，以避免被替换的组件在切换回来的时候重新渲染，达到缓存组件的目的。\r\n\r\n### 杂项\r\n\r\n#### 编写可复用的组件\r\n\r\nVue 组件的 API 来自三部分 —— prop、事件、slot插槽：\r\n\r\n- **prop** 提供父组件向子组件传递数据的传输通道，数据是作为props数组的项来传递\r\n- **事件** 允许子组件向父组件传递数据，侧重于子组件的事件侦听器中通过`this.$emit('某一父组件事件')`方法来触发某一父组件的事件侦听器，从而执行父组件的某一任务。\r\n- **slot插槽** slot插槽用于将父组件收到的数据内容依据内容分发凭证（子组件中`slot`标签的name属性）分发给各个子组件。\r\n\r\n#### 子组件引用（ref属性）\r\n\r\n使用[ref属性][4]作为子组件指定的一个引用id，这样就可在JavaScript中直接访问子组件。\r\n\r\n>因为`$refs`是非响应式，故应该避免在模板或计算属性中使用`$refs`。\r\n\r\n#### 组件命名约定\r\n\r\n注册组件时，可使用kebab-case、camelCase、PascalCase\r\n\r\n在HTML模板中，始终使用kebab-case。\r\n\r\n#### 内联模板\r\n\r\n若子组件有inline-template属性，那么组件将它本身的内容（子节点）代替组件模板渲染出来，而不是把它当作分发内容。\r\n\r\n```html\r\n<app inline-template>\r\n  <p>From custom element</p>\r\n</app>\r\n```\r\n\r\n```js\r\nnew Vue({\r\n  el:'app',\r\n  components: {\r\n    'app': {\r\n      /**\r\n       * 1.因为是组件模板向HTML文档渲染，故此时的子组件为自定义标签\r\n       * 2.因为子组件（自定义标签）中存在inline-template属性，以下组件模板将被子组件自\r\n       * 身的内容代替\r\n       */\r\n      template:`<div>There are something good</div>`\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n渲染结果为：\r\n\r\n`From custom element`\r\n\r\n**作用：**即有了inline-template属性，我们可以决定是渲染自定义标签中的内容还是渲染组件模板中的内容。\r\n\r\n>在项目中，inline-template属性可能使模板的作用域难以理解。**最佳实践**为使用组件模板的template选项或在`.vue`文件中使用`template`元素。\r\n\r\n#### X-Template\r\n\r\n除组件模板、内联模板外，第三种定义模本的方式是在JavaScript标签中使用`text/x-template`类型。并指定一个id属性。\r\n\r\n```html\r\n<script type=\"text/x-template\" id=\"hello-world-template\">\r\n  <p>Hello hello hello</p>\r\n</script>\r\n```\r\n\r\n```js\r\nVue.component('hello-world', {\r\n  template: '#hello-world-template'  // 此处引用了定义的模板\r\n})\r\n```\r\n\r\n>此法将组件模板与定义分离，不便于管理。故一般情况下应避免使用。\r\n\r\n#### 对敌开销的静态组件使用 v-once\r\n\r\n当组件包含大量**静态**内容时，可使用 [v-once][5] 可缓存渲染结果。\r\n\r\n  [1]: https://cn.vuejs.org/v2/guide/components.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\r\n  [2]: https://cn.vuejs.org/v2/guide/components.html#%E7%BB%84%E4%BB%B6%E7%BB%84%E5%90%88\r\n  [3]: https://cn.vuejs.org/v2/guide/components.html#%E7%BC%96%E8%AF%91%E4%BD%9C%E7%94%A8%E5%9F%9F\r\n  [4]: https://cn.vuejs.org/v2/guide/components.html#%E5%AD%90%E7%BB%84%E4%BB%B6%E5%BC%95%E7%94%A8\r\n  [5]: https://cn.vuejs.org/v2/api/#v-once\r\n"}