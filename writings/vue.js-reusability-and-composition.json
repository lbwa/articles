{"title":"学习 Vue.js 可复用性和组合","subtitle":"理解 Vue.js 进阶思维 —— 可复用性&组合","date":"2018 MAR 12","author":"Bowen","tags":["前端开发","JavaScript","Vue.js"],"errno":0,"to":"writings/vue.js-reusability-and-composition","content":"\r\n## 混入\r\n\r\n### 基础\r\n\r\n混入可理解为在一个组件中调用另外一个包含组件选项的**对象**。可类比 Sass 中的 `@mixin` 混合宏、DOM 中的 `DocumentFragment` 类型。这里可以得到，混入是为了增强 Vue 中的选项复用性。\r\n\r\n在创建 Vue 实例时，使用`mixins`选项来引入混入对象。\r\n\r\n```js\r\nconst CustomMixin = {\r\n  created () {\r\n    this.hello()\r\n  },\r\n  methods: {\r\n    hello () {\r\n      console.log('App is running now !')\r\n    }\r\n  }\r\n}\r\n\r\nnew Vue({\r\n  el: '#app',\r\n  mixins: [CustomMixin],  // 使用 mixins 选项来引入混入对象\r\n})\r\n```\r\n\r\n### 选项合并\r\n\r\n1. 在混入时，各个选项的合并是**浅合并**（如，指向对象的指针就只会复制指针而不是复制对象，并没有开辟新的内存地址），在选项发生冲突时以组件数据优先。\r\n1. 同名钩子函数将混合为一个数组，因此**都**将被调用。另外，混入对象的钩子将在组件自身钩子**之前**调用。\r\n1. 值为对象的选项，例如 `methods`, `components` 和 `directives`，将被混合为**同一个**对象。两个对象键名冲突时，取组件对象的键值对。\r\n\r\n\r\n### 全局混入\r\n\r\n谨慎使用全局混入，因为一旦混入，将影响到**所有**之后创建的 Vue 实例。\r\n\r\n## 自定义指令\r\n\r\n使用 `Vue.directive()` 来创建全局自定义指令。在创建 Vue 实例时使用 `directive` 选项来创建局部自定义指令。\r\n\r\n格式如下：\r\n\r\n```js\r\n// 注册一个全局自定义指令 `v-focus`\r\nVue.directive('focus', {   // 调用时加前缀 V-\r\n  // 当被绑定的元素插入到 DOM 中时\r\n  inserted: function (el) {\r\n    // 聚焦元素\r\n    el.focus()\r\n  }\r\n})\r\n// 局部自定义指令\r\ndirectives: {\r\n  focus: {   // 调用时加前缀 V-\r\n    // 指令的定义\r\n    inserted: function (el) {\r\n      el.focus()\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n``` html\r\n<input v-focus>\r\n```\r\n\r\n## 渲染函数 & JSX\r\n\r\n### 基础\r\n\r\n渲染函数的作用是**渲染视图**，又称为`render 函数`。\r\n\r\n在 `vue-cli` 的 `webpack` 模板中的 `main.js` 中有以下声明：\r\n```js\r\nnew Vue({\r\n  el: '#app',\r\n  components: { App },  // 表示实例中有哪些组件可用\r\n  template: `<App/>`    // 表示要渲染哪些可用组件，这里形如 <App></App>\r\n})\r\n```\r\n以上代码中，\r\n\r\ncomponents 选项，包含 Vue 实例可用组件的哈希表。即 `components` 选项表示声明了实例中存在哪些组件。（参考[官方 issue][template-role]、[API:components选项][api-components]）\r\n\r\ntemplate 选项，表示选项的值`一个字符串模板`作为 Vue 实例的标识使用。模板将会**替换**挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。即该选项`表示要渲染哪些组件`。（参考[官方 issue][template-role]、[API:template选项][api-template]）\r\n\r\n以对 `components` 和 `template` 两个选项作用的理解，那么 `渲染函数` 代替的是 `template` 选项的作用，达到**定制化渲染**的作用。\r\n\r\n### 虚拟 DOM\r\n\r\nVue 通过建立一个**虚拟DOM**对真实的DOM发生的变化保持追踪。在 `render 函数` 中传入一个 `createElement 函数(简写为 h)`（[vue-JSX 使用文档][h-injection]、[Vue 文档][JSX]）来生成模板。\r\n\r\n`createElement 函数` 返回的是 `虚拟节点 VNode`， 它包含的信息会告诉 Vue 页面上需要渲染什么样的节点，以及子节点。\r\n\r\n### createElement 参数\r\n\r\n`createElement` 参数至多包含 3 个部分。\r\n\r\n**一个**要创建的元素标签名（类型：字符串/对象/函数返回值）；\r\n\r\n**一个**包含模板相关属性的 data 对象（类型：对象）；\r\n\r\n**一个**子节点（类型：字符串/数组），且这个子节点也是由另外的 `createElement 函数` 构成。\r\n\r\n其中，data 对象和子节点为可选参数。\r\n\r\n格式如下：\r\n\r\n```js\r\n// @returns {VNode}\r\ncreateElement(\r\n  // {String | Object | Function}\r\n  // 一个 HTML 标签字符串，组件选项对象，或者一个返回值\r\n  // 类型为 String/Object 的函数，必要参数\r\n  'div',\r\n\r\n  // {Object}\r\n  // 一个包含模板相关属性的数据对象\r\n  // 这样，可以在 template 中使用这些属性。可选参数。\r\n  {\r\n    // 此处写入数据对象\r\n    // https://cn.vuejs.org/v2/guide/render-function.html#深入-data-对象\r\n  },\r\n\r\n  // {String | Array}\r\n  // 子节点 (VNodes)，由 `createElement()` 构建而成，\r\n  // 或使用字符串来生成“文本节点”。可选参数。\r\n  [\r\n    '先写一些文字',\r\n    createElement('h1', '一则头条'),\r\n    createElement(MyComponent, {\r\n      props: {  // 组件 props\r\n        someProp: 'foobar'\r\n      }\r\n    })\r\n  ]\r\n)\r\n```\r\n\r\n### JSX\r\n\r\nJSX 最初出现在 `React.js` 中。JSX 语法指在 JS 代码中**直接**嵌入 HTML。JSX 的出现颠覆了以往的 MVC 思想，MVC 是侧重视觉上分离，注重 HTML 与 JS 的分离。但局限性就是，当有大量的 JS 和 HTML 模板时，其中错综复杂的逻辑将导致难以维护。\r\n\r\nReact 官方认为应该**侧重于关注组件整体**，应该**从功能上**将各个组件分离开来，组件是和模板紧密关联的，组件模板和组件逻辑分离让问题复杂化。正是基于侧重`从功能上分离组件`的思维，诞生了 JSX 语法。JSX 把 HTML 模板直接嵌入到 JS 中，侧重的是从功能上将各个组件分离，注重的是组件整体。JS 本身不支持直接包含 HTML 的语法，所以要通过工具将 JSX 编译(在 Vue 中使用[babel 插件][babel-plugin-transform-vue-jsx])输出为 JS 代码才能使用。\r\n\r\n在 Vue 中使用 JSX 可缓解大量调用 `render 函数`的情况。\r\n\r\n[Vue-JSX 使用文档][vue-jsx]\r\n\r\n\r\n\r\n[template-role]:https://github.com/vuejs-templates/webpack/issues/575\r\n\r\n[api-components]:https://cn.vuejs.org/v2/api/#components\r\n\r\n[api-template]:https://cn.vuejs.org/v2/api/#template\r\n\r\n[h-injection]:https://github.com/vuejs/babel-plugin-transform-vue-jsx#h-auto-injection\r\n\r\n[JSX]:https://cn.vuejs.org/v2/guide/render-function.html#JSX\r\n\r\n[vue-jsx]:https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage\r\n\r\n[babel-plugin-transform-vue-jsx]:https://github.com/vuejs/babel-plugin-transform-vue-jsx\r\n"}